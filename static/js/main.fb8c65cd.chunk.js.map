{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","react_default","a","createElement","style","height","alert","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","console","log","mode","backgroundColor","color","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","aria-checked","htmlFor","TextForm","count","ntext","ar","split","sum","length","i","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","col","heading","value","onChange","event","target","rows","disabled","newText","showAlert","navigator","clipboard","writeText","document","getSelection","removeAllRanges","nText","join","margin","prototype","PropTypes","string","about","defaultProps","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","cls","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","getElementById"],"mappings":"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","file":"static/js/main.fb8c65cd.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    <div style={{height : '50px'}}>\r\n      {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n      </div>}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n  console.log(props.mode + \" navbar\");\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    style = {{backgroundColor : props.mode === 'dark' ? '#515151' : 'white' ,color : props.mode === 'dark' ? 'white' : 'black'}}>\r\n    <div className=\"container-fluid\">\r\n    {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          {/* <Link className=\"nav-link act\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n          <a className=\"nav-link act\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link className=\"nav-link act\" to=\"/about\">About</Link>\r\n        </li>  */}\r\n      </ul>\r\n      {/* <form className=\"d-flex\" role=\"search\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      {/* <div className=\"d-flex\">\r\n        <div className=\"bg-primary rounded mx-2\" onClick = {()=> props.toggleMode('primary')} style = {{height : '30px' , width : '30px' , cursor : 'pointer'}}></div>\r\n        <div className=\"bg-danger rounded mx-2\" onClick = {()=> props.toggleMode('danger')} style = {{height : '30px' , width : '30px' , cursor : 'pointer'}}></div>\r\n        <div className=\"bg-success rounded mx-2\" onClick = {()=> props.toggleMode('succcess')} style = {{height : '30px' , width : '30px' , cursor : 'pointer'}}></div>\r\n        <div className=\"bg-warning rounded mx-2\" onClick = {()=> props.toggleMode('warning')} style = {{height : '30px' , width : '30px' , cursor : 'pointer'}}></div>\r\n      </div> */}\r\n      <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n        <input className=\"form-check-input\" type=\"checkbox\" onClick={()=> props.toggleMode('null')} role=\"switch\" aria-checked=\"true\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n  )\r\n}\r\nNavbar.prototype = {\r\n    title : PropTypes.string,\r\n    about : PropTypes.string\r\n}\r\nNavbar.defaultProps = {\r\n    title : 'Set Title',\r\n    about : 'Set about us'\r\n}","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n\r\nconsole.log();\r\n\r\n  const handleUpClick = () => {\r\n    //console.log(\"Uppercase was Clicked : \" + text);\r\n    let newText = text.toUpperCase();\r\n    //setText(\"You have clicked on handleUpClick\");\r\n    setText(newText);\r\n    if(text === \"\"){\r\n      props.showAlert(\"Please enter the text \" , \"danger\");\r\n    }\r\n    else{\r\n      props.showAlert(\"Converted to Upper Case \" , \"success\");\r\n    }\r\n  };\r\n  const handleLoClick = () => {\r\n    //console.log(\"Uppercase was Clicked : \" + text);\r\n    let newText = text.toLowerCase();\r\n    //setText(\"You have clicked on handleUpClick\");\r\n    setText(newText);\r\n    if(text === \"\"){\r\n      props.showAlert(\"Please enter the text \" , \"danger\");\r\n    }\r\n    else{\r\n      props.showAlert(\"Converted to Lower Case \" , \"success\");\r\n    }\r\n  };\r\n   const handleClClick = () => {\r\n    \r\n    let newText = '';\r\n   \r\n    setText(newText);\r\n    props.showAlert(\"Text cleared \" , \"success\")\r\n  };\r\n  const handleCopy = () => {\r\n    navigator.clipboard.writeText(text);\r\n    document.getSelection().removeAllRanges();\r\n    props.showAlert(\"Copied to Clipboard \" , \"success\")\r\n  };\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    let nText = newText.join(\" \");\r\n    if(nText.charAt(0) === ' ' && nText.length > 1){\r\n      nText = nText.slice(1);\r\n    }\r\n    setText(nText);\r\n    props.showAlert(\"Text Formated \" , \"success\")\r\n  };\r\n  const handlefirstUp = () => {\r\n\r\n    let newText = text.split(\" \");\r\n    for(let i=0;i<newText.length;i++){\r\n      newText[i]=newText[i].charAt(0).toUpperCase() + newText[i].slice(1).toLowerCase();\r\n    }\r\n    setText(newText.join(\" \"))\r\n    props.showAlert(\"Converted first letter to capital \" , \"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    //console.log(\"On Change\");\r\n    setText(event.target.value);\r\n  };\r\n  const count = (ntext)=>{\r\n    let ar = ntext.split(/\\s+/);\r\n    let sum = ar.length;\r\n    if(ntext === ''){\r\n      sum = 0;\r\n    }\r\n    let i = sum-1;\r\n    while(i >= 0){\r\n      if(ar[i] === \"\"){\r\n        sum--;\r\n      }\r\n      i--;\r\n    }\r\n    return sum;\r\n  }\r\n\r\n  const [text, setText] = useState(\"Enter the text here\");\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\"\r\n      style = {{backgroundColor : props.col ,\r\n      color : props.mode === 'dark' ? 'white' : 'black' }}>\r\n        <h1>{props.heading}</h1>\r\n        <div className={`mb-3`}>\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style = {{backgroundColor : props.mode === 'dark' ? '#515151' : 'white' ,color : props.mode === 'dark' ? 'white' : 'black'}}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button disabled={count(text)===0} className=\"btn btn-primary mx-2 my-2\" onClick={handleUpClick}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button disabled={count(text)===0} className=\"btn btn-primary my-2\" onClick={handleClClick}>\r\n          Clear\r\n        </button>\r\n        \r\n        <button disabled={count(text)===0} className=\"btn btn-primary mx-2\" onClick={handleLoClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        \r\n        <button disabled={count(text)===0} className=\"btn btn-primary my-2\" onClick={handleCopy}>\r\n          Copy\r\n        </button>\r\n\r\n        <button disabled={count(text)===0} className=\"btn btn-primary mx-2 my-2\" onClick={handleExtraSpaces}>\r\n          Remove Extra Spaces\r\n        </button>\r\n        \r\n        <button disabled={count(text)===0} className=\"btn btn-primary\" style={{margin: '8px'}} onClick={handlefirstUp}>\r\n          First letter Upper Case\r\n        </button>\r\n      </div>\r\n      <div className=\"container\"style = {{backgroundColor : props.mode === 'dark' ? props.col : 'white' ,color : props.mode === 'dark' ? 'white' : 'black'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>\r\n                {count(text)} words , {text.length} characters</p>\r\n            <p>\r\n                {0.008 * count(text)} Minutes to read.\r\n            </p>\r\n            <h2>Preview</h2>\r\n            <p>{count(text) === 0? \"Nothing to preview\" : text}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","\r\nimport './App.css';\r\nimport React, { useState } from \"react\";\r\nimport Alert from \"./components/Alert\";\r\n// import About from \"./components/About\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport TextForm from \"./components/TextForm\";\r\n// import {\r\n//   BrowserRouter as Router,\r\n//   Routes,\r\n//   Route\r\n// } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  const[mode,setMode] = useState('light');\r\n  const[alert,setAlert] = useState(null);\r\n\r\n  const showAlert = (message,type) =>{\r\n    setAlert({\r\n      msg : message,\r\n      type : type\r\n    })\r\n    setTimeout(() =>{\r\n      setAlert(null);\r\n    },1500)\r\n  }\r\n  const toggleMode = (cls)=>{\r\n      if(mode === 'light'){\r\n        setMode('dark');\r\n        // removeBodyClasses();\r\n        // document.body.classList.add('bg-'+cls);\r\n        document.body.style.backgroundColor = 'grey';\r\n        showAlert(\"Dark mode has been enabled\", \"success\");\r\n    }\r\n    else{\r\n      setMode('light');\r\n      document.body.style.backgroundColor = 'white';\r\n      showAlert(\"Light mode has been enabled\", \"success\");\r\n    }\r\n  }\r\n  // const removeBodyClasses = () =>{\r\n  //   document.body.classList.remove('bg-dark');\r\n  //   document.body.classList.remove('bg-primary');\r\n  //   document.body.classList.remove('bg-light');\r\n  //   document.body.classList.remove('bg-success');\r\n  //   document.body.classList.remove('bg-danger');\r\n  //   document.body.classList.remove('bg-warning');\r\n  // }\r\n  return (\r\n    <>\r\n    {/* <Router> */}\r\n    <Navbar title=\"TextUtils\" about=\"About us 2\" mode={mode}  toggleMode={toggleMode}/>\r\n     <Alert alert = {alert} />\r\n      <div className=\"container my-3\" >\r\n        {/* <Routes>\r\n            <Route exact path=\"/about\" element={<About  mode={mode} toggleMode={toggleMode} />} />\r\n            <Route exact path=\"/\" element={<TextForm  showAlert={showAlert} heading = \"Enter the text to anazlyze \" mode={mode} toggleMode={toggleMode}/>}  />\r\n          </Routes> */}\r\n          <TextForm  showAlert={showAlert} heading = \"Enter the text to anazlyze \" mode={mode} toggleMode={toggleMode}/>\r\n      </div>\r\n      {/* </Router> */}\r\n    </>\r\n\r\n  );\r\n}\r\n\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}